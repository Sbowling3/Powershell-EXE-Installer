Add-Type -AssemblyName System.Windows.Forms
Add-Type -AssemblyName System.Drawing

# Function to perform a scan using wsusscn2.cab and display results
function Perform-Scan {
    param ($listBox, $progressBar)

    # Initialize COM objects for update session and service manager
    $UpdateSession = New-Object -ComObject Microsoft.Update.Session
    $UpdateServiceManager = New-Object -ComObject Microsoft.Update.ServiceManager
    $UpdateService = $UpdateServiceManager.AddScanPackageService("Offline Sync Service", "C:\wsusscn2.cab")
    $UpdateSearcher = $UpdateSession.CreateUpdateSearcher()

    # Start scan and update progress bar
    $listBox.Items.Clear()
    $progressBar.Value = 0
    $progressBar.Visible = $true
    Write-Host "Searching for updates..."

    $UpdateSearcher.ServerSelection = 3 # ssOthers
    $UpdateSearcher.ServiceID = [string] $UpdateService.ServiceID
    
    # Simulate progress
    for ($i = 1; $i -le 100; $i+=10) {
        Start-Sleep -Milliseconds 100
        $progressBar.Value = $i
    }
    
    $SearchResult = $UpdateSearcher.Search("IsInstalled=0")
    $Updates = $SearchResult.Updates
    $progressBar.Value = 100
    $progressBar.Visible = $false

    if ($SearchResult.Updates.Count -eq 0) {
        [System.Windows.Forms.MessageBox]::Show("There are no applicable updates.", "No Updates Found")
        return @()
    }

    Write-Host "List of applicable items on the machine when using wsusscn2.cab:"
    $results = @()
    for ($i = 0; $i -lt $SearchResult.Updates.Count; $i++) {
        $update = $SearchResult.Updates.Item($i)
        $results += [PSCustomObject]@{ Title = $update.Title; Id = $update.KBArticleIDs[0] }
        $listBox.Items.Add($update.Title)
    }

    return $results
}

# Function to install selected cab files using DISM
function Install-SelectedFiles {
    param ($listBox, $scanResults)

    foreach ($selectedItem in $listBox.SelectedItems) {
        $result = $scanResults | Where-Object { $_.Title -eq $selectedItem }
        $openFileDialog = New-Object System.Windows.Forms.OpenFileDialog
        $openFileDialog.Filter = "CAB files (*.cab)|*.cab"
        if ($openFileDialog.ShowDialog() -eq [System.Windows.Forms.DialogResult]::OK) {
            $filePath = $openFileDialog.FileName
            Start-Process -FilePath "dism.exe" -ArgumentList "/Online", "/Add-Package", "/PackagePath:$filePath" -Wait
        }
    }
    [System.Windows.Forms.MessageBox]::Show("Selected updates have been installed.", "Installation Complete")
}

# Function to save scan results to a text file
function Save-ResultsToFile {
    param ($scanResults)

    $saveFileDialog = New-Object System.Windows.Forms.SaveFileDialog
    $saveFileDialog.Filter = "Text files (*.txt)|*.txt"
    $saveFileDialog.DefaultExt = "txt"
    $saveFileDialog.AddExtension = $true
    if ($saveFileDialog.ShowDialog() -eq [System.Windows.Forms.DialogResult]::OK) {
        $filePath = $saveFileDialog.FileName
        $scanResults | ForEach-Object { "$($_.Title)`r`n" } | Out-File -FilePath $filePath
        [System.Windows.Forms.MessageBox]::Show("Results saved to $filePath.", "Save Complete")
    }
}

# Check if wsusscn2.cab already exists in C:
$wsusscnExists = Test-Path -Path "C:\wsusscn2.cab"

# Create Form
$form = New-Object System.Windows.Forms.Form
$form.Text = "CAB Update Installer"
$form.Size = New-Object System.Drawing.Size(500, 500)
$form.StartPosition = "CenterScreen"
$form.AutoSizeMode = "GrowAndShrink"
$form.AutoSize = $false

# Create a label for instructions
$label = New-Object System.Windows.Forms.Label
$label.Text = "1. Browse for wsusscn2.cab file and copy to C:\wsusscn2.cab"
$label.Size = New-Object System.Drawing.Size(450, 20)
$label.Location = New-Object System.Drawing.Point(20, 10)
$form.Controls.Add($label)

# Create Button to browse for wsusscn2.cab file
$btnBrowseCab = New-Object System.Windows.Forms.Button
$btnBrowseCab.Text = "Browse CAB"
$btnBrowseCab.Location = New-Object System.Drawing.Point(20, 40)
$btnBrowseCab.AutoSize = $true
$form.Controls.Add($btnBrowseCab)

# Create Button to perform scan
$btnScan = New-Object System.Windows.Forms.Button
$btnScan.Text = "Scan for Updates"
$btnScan.Location = New-Object System.Drawing.Point(120, 40)
$btnScan.AutoSize = $true
$btnScan.Enabled = !$wsusscnExists
$form.Controls.Add($btnScan)

# Create a progress bar for scanning updates
$progressBar = New-Object System.Windows.Forms.ProgressBar
$progressBar.Size = New-Object System.Drawing.Size(450, 20)
$progressBar.Location = New-Object System.Drawing.Point(20, 80)
$progressBar.Minimum = 0
$progressBar.Maximum = 100
$progressBar.Visible = $false
$form.Controls.Add($progressBar)

# Create a ListBox to display scan results
$scanResultsListBox = New-Object System.Windows.Forms.ListBox
$scanResultsListBox.Size = New-Object System.Drawing.Size(450, 250)
$scanResultsListBox.Location = New-Object System.Drawing.Point(20, 110)
$scanResultsListBox.SelectionMode = 'MultiExtended'
$form.Controls.Add($scanResultsListBox)

# Create Button to install selected updates
$btnInstall = New-Object System.Windows.Forms.Button
$btnInstall.Text = "Install Selected Updates"
$btnInstall.Location = New-Object System.Drawing.Point(20, 370)
$btnInstall.AutoSize = $true
$btnInstall.Enabled = $false
$form.Controls.Add($btnInstall)

# Create Button to save scan results
$btnSaveResults = New-Object System.Windows.Forms.Button
$btnSaveResults.Text = "Save Results"
$btnSaveResults.Location = New-Object System.Drawing.Point(200, 370)
$btnSaveResults.AutoSize = $true
$btnSaveResults.Enabled = $false
$form.Controls.Add($btnSaveResults)

# Event Handler for Browse Button
$btnBrowseCab.Add_Click({
    $openFileDialog = New-Object System.Windows.Forms.OpenFileDialog
    $openFileDialog.Filter = "CAB files (*.cab)|*.cab"
    if ($openFileDialog.ShowDialog() -eq [System.Windows.Forms.DialogResult]::OK) {
        $selectedCabPath = $openFileDialog.FileName
        Copy-Item -Path $selectedCabPath -Destination "C:\wsusscn2.cab" -Force
        [System.Windows.Forms.MessageBox]::Show("CAB file copied to C:\wsusscn2.cab.", "CAB Copied")
        $btnScan.Enabled = $true
    }
})

# Event Handler for Scan Button
$btnScan.Add_Click({
    $scanResults = Perform-Scan -listBox $scanResultsListBox -progressBar $progressBar
    if ($scanResults.Count -gt 0) {
        $btnInstall.Enabled = $true
        $btnSaveResults.Enabled = $true
    }
})

# Event Handler for Install Button
$btnInstall.Add_Click({
    Install-SelectedFiles -listBox $scanResultsListBox -scanResults $scanResults
})

# Event Handler for Save Results Button
$btnSaveResults.Add_Click({
    Save-ResultsToFile -scanResults $scanResults
})

# Show the form
$form.Add_Shown({
    $form.Activate()
})
$form.Topmost = $true
$form.ShowDialog()
